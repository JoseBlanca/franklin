#!/usr/bin/env python

# Copyright 2009 Jose Blanca, Peio Ziarsolo, COMAV-Univ. Politecnica Valencia
# This file is part of project.
# franklin is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.

# franklin is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR  PURPOSE.  See the
# GNU Affero General Public License for more details.

# You should have received a copy of the GNU Affero General Public License
# along with franklin. If not, see <http://www.gnu.org/licenses/>.

import sys, os.path, copy
from optparse import OptionParser

try:
    from collections import OrderedDict
except ImportError:
    from franklin.utils.misc_utils import OrderedDict

import franklin.utils.cgitb as cgitb
from franklin.seq.seq_cleaner import check_sequences_length
from franklin.utils.misc_utils import get_num_threads
from franklin.seq.readers import guess_seq_file_format
from franklin.seq.writers import SequenceWriter
from franklin.pipelines.pipelines import seq_pipeline_runner
from franklin.pipelines.seq_pipeline_steps import (double_encoding,
                                                   sequence_trimmer,
                                                   edge_remover,
                                                   solid_quality,
                                                   strip_quality, up_case,
                                                   remove_adaptors,
                                                   remove_vectors_blastdb,
                                                   remove_vectors_file,
                                                   strip_quality_lucy,
                                                   strip_quality_by_n,
                                                   remove_short_adaptors,
                                                   filter_similar_seqs)
import franklin

class UnknownFormatError(Exception):
    'Special error for guess_seq_file error'
    pass

class PsubprocessNotFounError(Exception):
    'Error to use when psubprocess is not found'
    pass

class PlatformParamError(Exception):
    "Error to use when platform and options don't fit"
    pass

class AdaptorError(Exception):
    "Error to use when adaptors length is less than min"
    pass

class ValidationError(Exception):
    'Error for parameters that fail to be validated'
    pass

SOLID = 'solid'
SANGER = 'sanger'
ILLUMINA = 'illumina'
_454 = '454'
LONG_WITH_QUALITY = 'long_with_quality'
LONG_WITHOUT_QUALITY = 'long_without_quality'
AVAILABLE_PLATFORMS = [SOLID, _454, SANGER, ILLUMINA]

long_param = 'long_param'
short_param = 'short_param'
required = 'required'
help = 'help'
choices = 'choices'
action = 'action'
default = 'default'
type_ = 'type'
path_exists = 'path_exists'
path = 'path'
int_list = 'int_list'
str_list = 'str_list'
float_list = 'float_list'

PARAMETERS = OrderedDict([
    ('seq_in', {long_param: '--seq_in',
                short_param: '-i',
                required:True,
                help:'Input sequence file (Required).',
                type_:path_exists}),
    ('seq_out', {long_param: '--seq_out',
                short_param: '-o',
                required:True,
                help:'Output sequence file (Required).',
                type_:path}),
    ('platform', {long_param: '--platform',
                short_param: '-p',
                required:True,
                help:'Sequencing platform. (Required).',
                type_:str}),
    ('format', {long_param: '--format',
                short_param: '-f',
                help:'Input sequence file format.',
                type_:str}),
    ('out_format', {long_param: '--output_format',
                short_param: '-g',
                help:'Output sequence file format.',
                type_:str}),
    ('double_encoding', {long_param: '--double_encoding',
                    help:"Use double encoding for solid (default Not use).",
                         action:'store_true',
                         default:{'SOLID': 'False'},
                         type_:bool}),
    ('qual_in', {long_param: '--qual_in',
                short_param: '-q',
                help:'Input quality file.',
                type_:path_exists}),
    ('qual_out', {long_param: '--qual_out',
                short_param: '-u',
                help:'Output quality file.',
                type_:path}),
    ('adaptors_file', {long_param: '--adaptors_file',
                       short_param: '-a',
                       help:'File with adaptors to remove from reads.',
                       type_:path_exists}),
    ('vector_file', {long_param: '--vector_file',
                     short_param: '-v',
                     help:'File with vector to remove from reads.',
                     type_:path_exists}),
    ('vector_db', {long_param: '--vector_db',
                   short_param: '-d',
                   help:'Vector BLAST database.',
                   type_:str}),
    ('re_words', {long_param: '--re_words',
                  short_param: '-r',
                  help:'A list of regular expressions to be trimmed.',
                  type_:str_list}),
    ('edge_trim', {long_param: '--edge_trim',
                   short_param: '-e',
             help:'Number of nucleotides to be removed from beginning and end.',
                   type_:int_list}),
    ('disable_quality', {long_param: '--disable_quality_trimming',
                         short_param: '-x',
                         action:'store_true',
                         default:False,
                         type_:bool,
                         help:'Quality trimming algorithms will not be used'}),
    ('n_percent', {long_param: '--n_percent',
                   short_param: '-n',
     help:'Allowed percent of Ns at the read begining and end (default %i).',
                   default:{LONG_WITHOUT_QUALITY:2},
                   type_:float}),
    ('lucy_splice', {long_param: '--lucy_splice_file',
                     help:'Lucy splice site file.',
                     type_:path_exists}),
    ('lucy_bracket', {long_param: '--lucy_bracket',
                      help:'Lucy bracket paramters.',
                      default:{LONG_WITH_QUALITY:'10, 0.02'},
                      type_:float_list}),
    ('lucy_window', {long_param: '--lucy_window',
                     help:'Lucy window sizes.',
                     default:{LONG_WITH_QUALITY:'50, 0.08, 10, 0.3'},
                     type_:float_list}),
    ('lucy_error', {long_param: '--lucy_error',
                    help:'Lucy error parameter.',
                    default:{LONG_WITH_QUALITY:'0.015, 0.015'},
                    type_:float_list}),
    ('qual_threshold', {long_param: '--qual_threshold',
                        help:'Quality threshold.',
                        default:{ILLUMINA:20, SOLID:20},
                        type_:int}),
    ('qual_window', {long_param: '--qual_window',
                     help:'Quality window.',
                     default:{ILLUMINA:1, SOLID:1},
                     type_:int}),
    ('only_3_end', {long_param: '--only_3_end',
                    help:"Quality trim only from the 3' end (deafult: False for Illumina, True for Solid).",
                    action:'store_true',
                    default:{SOLID:True, ILLUMINA:False},
                    type_:bool}),
    ('solid_qual_length', {long_param: '--solid_qual_length',
                   help:"Number of 5' colors to consider to quality filtering.",
                           default:{SOLID:'10'},
                           type_:int}),
    ('solid_qual_threshold', {long_param: '--solid_qual_threshold',
          help:"Minimum mean quality allowable for solid reads (default %i).",
                              default:{SOLID:15},
                              type_:int}),
    ('solid_allow_missing_call', {long_param: '--solid_allow_missing_call',
   help:"Disable filtering out solid reads with missing calls (default False).",
                    action:'store_true',
                    default:{SOLID:False},
                    type_:bool}),
    ('min_len', {long_param: '--min_len',
                 short_param: '-m',
                 help:'Minimum number of nucleotides after the trimming.',
                 type_:int}),
    ('filter_evalue', {long_param: '--filter_evalue',
                help:'evalue threshold used for blast filtering.',
                type_:float}),
    ('filter_identity', {long_param: '--filter_identity',
                help:'Minimum identity to consider a BLAST hsp (default 95%).',
                default:{ILLUMINA:95.0, LONG_WITH_QUALITY:95.0,
                         LONG_WITHOUT_QUALITY:95.0},
                type_:float}),
    ('filter_num_residues', {long_param: '--filter_num_residues',
                help:'Sequences with BLAST matches longer than this length will be filtered out.',
                type_:int}),
    ('filter_length_percentage', {long_param: '--filter_length_percentage',
                help:'Sequences with BLAST matches longer than this length will be filtered out (default 75).',
                default:{ILLUMINA:75.0, LONG_WITH_QUALITY:75.0,
                         LONG_WITHOUT_QUALITY:75.0},
                type_:float}),
    ('filter_dbs', {long_param: '--filter_dbs',
                help:'List of BLAST databases used for similarity filtering.',
                type_:str_list}),
    ('threads', {long_param: '--threads',
                short_param: '-t',
                help:'Number of threads to use. 0 for all cores. (default %i).',
                default:1,
                type_:int}),
    ('error_log', {long_param: '--error_log',
                help:'Path to the error log file to use (default %s).',
                default:'clean_reads.error',
                type_:path}),
])

INCOMPATIBLE_PARAMS_NO_SOLID = ['solid_qual_length', "solid_qual_threshold",
                                'solid_disable_missing_call']
INCOMPATIBLE_PARAMS = {SOLID: ['lucy_bracket', 'lucy_window', 'lucy_error',
                               'lucy_splice', 'n_percent', 're_words',
                               'adaptors_file', 'vector_file', 'vector_db',
                               'edge_trim', 'filter_evalue', 'filter_identity',
                               'filter_num_residues',
                               'filter_length_percentage',
                               'filter_dbs'],
                       LONG_WITH_QUALITY: ['qual_threshold', 'qual_window',
                                           'only_3_end',
                                           'double_encoding'],
                       LONG_WITHOUT_QUALITY: ['qual_threshold', 'qual_window',
                                              'only_3_end',
                                              'double_encoding',
                                              'lucy_bracket', 'lucy_window',
                                              'lucy_error', 'lucy_splice',
                                              'double_encoding'],
                       ILLUMINA: ['lucy_bracket', 'lucy_window', 'lucy_error',
                                  'lucy_splice', 'double_encoding']}
INCOMPATIBLE_PARAMS[LONG_WITH_QUALITY].extend(INCOMPATIBLE_PARAMS_NO_SOLID)
INCOMPATIBLE_PARAMS[LONG_WITHOUT_QUALITY].extend(INCOMPATIBLE_PARAMS_NO_SOLID)
INCOMPATIBLE_PARAMS[ILLUMINA].extend(INCOMPATIBLE_PARAMS_NO_SOLID)

def _prepare_pipeline(pipeline_type, parameters):
    'It prepares_the pipeline'
    adaptors_file = parameters.get('adaptors_file', None)
    if adaptors_file:
        try:
            check_sequences_length(open(parameters['adaptors_file']), 15)
        except ValueError as msg:
            raise AdaptorError('Adaptor length error:\n%s' % msg)

    if pipeline_type == SOLID:
        pipeline, configuration = _prepare_pipeline_for_solid(parameters)
    elif pipeline_type == ILLUMINA:
        pipeline, configuration = _prepare_pipeline_for_illumina(parameters)
    elif pipeline_type in (LONG_WITH_QUALITY, LONG_WITHOUT_QUALITY) :
        pipeline, configuration = _prepare_pipeline_for_long(parameters,
                                                             pipeline_type)

    # triming and seq_lengh steps
    pipeline.append(sequence_trimmer)
    min_len = parameters.get('min_length', None)
    if min_len:
        configuration['length'] = min_len
    return pipeline, configuration

def _prepare_pipeline_for_solid(parameters):
    'it prepares the solid pipeline'
    pipeline      = []
    configuration = {}

    use_double_encoding = parameters.get('double_encoding', None)
    if use_double_encoding:
        pipeline.append(double_encoding)
        configuration['double_encoding'] = {}

    #solid quality
    pipeline.append(solid_quality)
    configuration['solid_quality'] = {
                        'length':parameters['solid_qual_length'],
                        'threshold':parameters['solid_qual_threshold'],
                      'call_missing':not parameters['solid_allow_missing_call']}

    #strip_quality
    if not parameters['disable_quality']:
        pipeline.append(strip_quality)
        configuration['strip_quality'] = {
                              'quality_treshold': parameters['qual_threshold'],
                              'quality_window_width': parameters['qual_window'],
                              'only_3_end':parameters['only_3_end']}

    return pipeline, configuration

def _add_adaptor_and_vectors_step(parameters, pipeline, configuration):
    'It adds the adaptor and vectors steps'

    adaptors_file = parameters.get('adaptors_file', None)
    if adaptors_file:
        pipeline.append(remove_adaptors)
        configuration['remove_adaptors'] = {'adaptors': adaptors_file}

    #vector_db
    vectordb = parameters.get('vector_db', None)
    if vectordb:
        pipeline.append(remove_vectors_blastdb)
        configuration['remove_vectors_blastdb'] = {'vectors': vectordb,
                                                   'vectors_are_blastdb':True}

    #vector_file
    vector_file = parameters.get('vector_file', None)
    if vector_file:
        pipeline.append(remove_vectors_file)
        configuration['remove_vectors_file'] = {'vectors': vector_file,
                                                'vectors_are_blastdb':False}

    #remove words
    re_words = parameters.get('re_words', None)
    if re_words:
        pipeline.append(remove_short_adaptors)
        configuration['remove_short_adaptors'] = {'words': re_words}

    #edge_remover
    edge_trim = parameters.get('edge_trim', None)
    if edge_trim:
        if len(edge_trim) != 2:
            msg = 'The edge trim parameter should be a list of 2 integers'
            msg += ', but it was: ' + str(edge_trim)
            raise ValidationError(msg)
        left  = None if edge_trim[0] == 0 else edge_trim[1]
        rigth = None if edge_trim[0] == 0 else edge_trim[1]
        pipeline.append(edge_remover)
        configuration['edge_removal'] = {'left_length':left,
                                        'right_length':rigth}

def _add_blast_filtering_step(parameters, pipeline, configuration):
    'It adds the blast filtering'
    filter_dbs = parameters.get('filter_dbs', None)
    if not filter_dbs:
        return

    #blast filters
    filters = []
    expect = parameters.get('filter_evalue', None)
    if expect is not None:
        filter = {'kind'           : 'best_scores',
                  'score_key'      : 'expect',
                  'max_score'      : expect}
        filters.append(filter)
    identity = parameters.get('filter_identity', None)
    num_residues = parameters.get('filter_num_residues', None)
    if num_residues:
        if not identity:
            msg = 'filter_num_residues given but filter_identity not defined'
            raise ValidationError(msg)
        filter = {'kind': 'min_length',
                  'min_num_residues': num_residues,
                  'length_in_query' : True}
        filters.append(filter)

    length_percentage = parameters.get('filter_length_percentage', None)
    if length_percentage:
        if not identity:
            msg = 'filter_length_percentage given but filter_identity not defined'
            raise ValidationError(msg)
        filter = {'kind': 'min_length',
                  'min_percentage': length_percentage,
                  'length_in_query' : True}
        filters.append(filter)

    for index, blast_db in enumerate(filter_dbs):
        step_uniq_name = 'filter_similar_seqs' + str(index)
        step = copy.deepcopy(filter_similar_seqs)
        step['name_in_config'] = step_uniq_name
        configuration[step_uniq_name] = {'db':blast_db,
                                         'blast_program':'blastn',
                                         'filters':filters,
                                         'reverse':True}
        pipeline.append(step)

def _prepare_pipeline_for_illumina(parameters):
    'it prepares the illumina pipeline'
    pipeline      = []
    configuration = {}

    #upcase
    pipeline.append(up_case)
    configuration['up_case'] = {}

    _add_adaptor_and_vectors_step(parameters, pipeline, configuration)

    _add_blast_filtering_step(parameters, pipeline, configuration)

    # strip_quality
    if not parameters['disable_quality']:
        pipeline.append(strip_quality)
        configuration['strip_quality'] = {
                               'quality_treshold':parameters['qual_threshold'],
                               'quality_window_width':parameters['qual_window'],
                               'only_3_end':parameters['only_3_end']}

    return pipeline, configuration

def _prepare_pipeline_for_long(parameters, pipeline_type):
    'it prepares the sanger pipeline'
    pipeline      = []
    configuration = {}

    #upcase
    pipeline.append(up_case)
    configuration['up_case'] = {}

    _add_adaptor_and_vectors_step(parameters, pipeline, configuration)

    _add_blast_filtering_step(parameters, pipeline, configuration)

    #lucy
    if pipeline_type == LONG_WITH_QUALITY and not parameters['disable_quality']:
        pipeline.append(strip_quality_lucy)
        lucy_params = {'bracket':parameters['lucy_bracket'],
                       'window':parameters['lucy_window'],
                       'error':parameters['lucy_error']}
        lucy_splice_file = parameters.get('lucy_splice_file', None)
        vector_file = parameters.get('vector_file', None)
        if vector_file and lucy_splice_file:
            lucy_params['vector'] = [vector_file, lucy_splice_file]

        configuration['strip_lucy'] = {'parameters':lucy_params}

    # n_percent
    if pipeline_type == LONG_WITHOUT_QUALITY:
        n_percent = parameters.get('n_percent', None)
        if n_percent is not None:
            pipeline.append(strip_quality_by_n)
            configuration['strip_trimpoly'] = {'ntrim_above_percent':
                                                        parameters['n_percent']}

    return pipeline, configuration

def set_cli_interface():
    'It sets the command line options'
    version = "%%prog %s" % str(franklin.__clean_reads_version__)
    usage = "usage: %prog -i seq_file -o out_seq_file -p platform [options]"
    parser = OptionParser(usage=usage, version=version)

    for name, definition in PARAMETERS.items():
        args = []
        if short_param in definition:
            args.append(definition[short_param])
        if long_param in definition:
            args.append(definition[long_param])
        kwargs = {'dest':name}

        help_str = definition[help]
        if '%s' in help_str or '%i' in help_str:
            default_value = definition[default]
            if isinstance(default_value, dict):
                default_value = default_value.values()[0]
            help_str %= default_value
        kwargs['help'] = help_str
        if choices in definition:
            kwargs['choices'] = definition[choices]
        if action in definition:
            kwargs['action'] = definition[action]
        parser.add_option(*args, **kwargs)
    return parser

def get_input_output_options(parameters):
    'It gets the fhand for the input and output and removes those parameters'

    in_fhands = {}

    seq_in = parameters.get('seq_in', None)
    if seq_in is None:
        ValidationError("Input seqfile is required")
    else:
        in_fhands['in_seq'] = open(seq_in)

    qual_in = parameters.get('qual_in', None)
    if qual_in is not None:
        in_fhands['in_qual'] = open(qual_in)

    format_in = parameters.get('format', None)
    if format_in is None:
        try:
            format_in = guess_seq_file_format(in_fhands['in_seq'])
        except ValueError:
            msg = 'It was not possible to guess the format for file %s, please set it manualy'
            raise UnknownFormatError(msg)

    seq_out = parameters.get('seq_out', None)
    if seq_out is None:
        ValidationError("Output seqfile is required")
    else:
        seq_out_fhand = open(seq_out, 'w')

    qual_out = parameters.get('qual_out', None)
    if qual_out is None:
        qual_out_fhand = None
    else:
        qual_out_fhand = open(qual_out, 'w')

    format_out = parameters.get('out_format', None)
    if format_out is None:
        if format_in == 'csfasta':
            format_out = 'sfastq'
        else:
            format_out = format_in
        format_out = format_in

    writer = SequenceWriter(seq_out_fhand, format_out,
                            qual_fhand=qual_out_fhand)

    return in_fhands, format_in, writer

def _cast_int(value):
    'It casts to an int'
    try:
        value = int(value)
    except ValueError:
        msg = 'The given parameter is not an integer: %s' % value
        ValidationError(msg)
    return value
def _cast_float(value):
    'It casts to an float'
    try:
        value = float(value)
    except ValueError:
        msg = 'The given parameter is not a float: %s' % value
        ValidationError(msg)
    return value

def _cast_str(value):
    'It casts to an str'
    if (value.startswith('"') and value.endswith('"') or
        value.startswith("'") and value.endswith("'")):
        value = value[1:-1]
    return value
def _cast_bool(value):
    'It casts to a boolean'
    if type(value) == type(True):
        pass
    elif value.lower() in ('true', 't'):
        value = True
    elif value.lower() in ('false', 'f'):
        value = False
    else:
        ValidationError('Value %s is not boolean (True or False)' % value)
    return value

def _cast(type_, value):
    'It casts the given value to the given type'
    if value is None:
        return None
    if type_ == path_exists:
        value = str(value)
        if not os.path.exists(value):
            msg = 'The given file does not exists: %s' % value
            ValidationError(msg)
    elif type_ == int:
        value = _cast_int(value)
    elif type_ == float:
        value = _cast_float(value)
    elif type == str:
        value = _cast_str(value)
    elif type == bool:
        value = _cast_bool(value)
    if type_ in (int_list, float_list, str_list):
        value = value.split(',')
    if type_ == int_list:
        value = [_cast_int(val) for val in value]
    elif type_ == float_list:
        value = [_cast_float(val) for val in value]
    elif type_ == str_list:
        value = [_cast_str(val) for val in value]
    return value

def _get_cmd_parameters(parser, args):
    'It returns the parameters given in the command line'

    options = parser.parse_args(args=args)[0]

    parameters = OrderedDict()
    parameters['platform'] = options.platform
    if parameters['platform'] is None:
        raise ValidationError("The sequencing platform is required")
    else:
        parameters['platform'] = parameters['platform'].lower()

    if parameters['platform'] not in AVAILABLE_PLATFORMS:
        msg = 'Platform %s not recognized, available choices are: %s'
        msg %= str(parameters['platform']), ','.join(AVAILABLE_PLATFORMS)
        raise ValidationError(msg)

    for param_name in PARAMETERS:
        value = getattr(options, param_name)
        if value is not None:
            parameters[param_name] = getattr(options, param_name)
    return parameters

def _add_default_values_to_parameters(parameters, pipeline_type):
    'It returns the parameters with its default values added'

    for param_name, param_def in PARAMETERS.items():
        value = parameters.get(param_name, None)
        default_value = param_def.get(default, None)
        if isinstance(default_value, dict):
            if pipeline_type in default_value:
                default_value = default_value[pipeline_type]
            else:
                default_value = None
        if value is None and default_value is not None:
            value = default_value
        if value is not None:
            parameters[param_name] = _cast(param_def[type_], value)

    return parameters

def validate_parameters(parameters, pipeline_type):
    'It does some sanity checks on the parameters'

    if pipeline_type == SOLID and not parameters['only_3_end']:
        raise ValidationError('The solid platforms requires only_3_end set')

    if (parameters['disable_quality'] and
        parameters.get('lucy_splice', None)):
        msg = 'The parameters disable_quality_trimming and lucy_splice are '
        msg += 'incompatible.'
        raise ValidationError(msg)

    if (parameters.get('filter_num_residues', None) and
        parameters.get('filter_length_percentage', None)):
        msg = 'The parameters filter_num_residues and filter_length_percentage'
        msg += ' are incompatible.'
        raise ValidationError(msg)

    for name, value in parameters.items():
        if value is not None and name in INCOMPATIBLE_PARAMS[pipeline_type]:
            msg = 'Parameter %s is incompatible with platform %s'
            msg %= (name, pipeline_type)
            raise PlatformParamError(msg)

def _to_str(value):
    'It returns a string representation of the value'
    if isinstance(value, list) or isinstance(value, tuple):
        value = '"' + ','.join([str(item) for item in value]) + '"'
    else:
        value = str(value)
    return value

def log_parameters(fhand, parameters, pipeline_type):
    'It writes the current parameters for provenance.'

    msg = 'The command was:\n'
    msg += ' '.join(sys.argv) + '\n'
    fhand.write(msg)
    version = "%s version: %s" % (sys.argv[0],
                                  str(franklin.__clean_reads_version__))
    msg = 'Running pipeline %s with the following parameters:\n'
    msg %= pipeline_type
    fhand.write(msg)

    for name, value in parameters.items():
        if value is None:
            continue
        value = _to_str(value)
        msg = '%s: %s\n' % (PARAMETERS[name][long_param], value)
        fhand.write(msg)

def _get_num_threads(threads):
    'it calculates the threads'
    if threads == 0:
        try:
            import psubprocess
        except ImportError:
            msg = 'psubprocess is not installed, so threads can not be used'
            raise PsubprocessNotFounError(msg)
        threads = True
    return get_num_threads(threads)

def _guess_pipeline_type(parameters, format_in):
    'It sets the correct platform not the sequencing one'
    platform = parameters['platform']
    if platform in (SOLID, ILLUMINA):
        return platform
    #do we have quality?
    if 'qual_in' in parameters:
        platform = LONG_WITH_QUALITY
    elif format_in == 'fasta':
        platform =  LONG_WITHOUT_QUALITY
    elif 'fastq' in format_in:
        platform = LONG_WITH_QUALITY
    elif platform == _454:
        platform = LONG_WITH_QUALITY
    else:
        msg = 'Not possible to determine if the reads have quality, '
        msg += 'please inform about this error to the developers and use fasta'
        msg += 'or fastq as input'
        raise RuntimeError(msg)
    return platform

def main(stdout, stderr, args=None):
    'The main part'
    if args is None:
        args = sys.argv[1:]
    if 'testerror' in args:
        raise RuntimeError('This is the test error.')
    try:
        parser = set_cli_interface()
        params = _get_cmd_parameters(parser, args)
        in_fhands, in_format, writer = get_input_output_options(params)
        pipeline_type = _guess_pipeline_type(params, in_format)
        _add_default_values_to_parameters(params, pipeline_type)
        validate_parameters(params, pipeline_type)
        log_parameters(stdout, params, pipeline_type)
    except PlatformParamError as error:
        stderr.write(str(error))
        sys.exit(10)
    except ValidationError as error:
        stderr.write(str(error))
        sys.exit(11)
    except UnknownFormatError as error:
        stderr.write(str(error))
        sys.exit(12)

    # threads
    try:
        threads = params['threads']
        del params['threads']
        threads = _get_num_threads(threads)
    except PsubprocessNotFounError:
        msg = 'To use multiprocessing you need to install psubprocess'
        stderr.write(msg)
        sys.exit(13)

    # parameters
    try:
        pipeline, configuration = _prepare_pipeline(pipeline_type, params)
    except AdaptorError as error:
        stderr.write(str(error))
        sys.exit(14)

    # the runner
    seq_pipeline_runner(pipeline, configuration, in_fhands,
                        file_format=in_format, writers={'seq': writer},
                        processes=threads)

if __name__ == '__main__':
    if len(sys.argv) == 1:
        sys.argv = sys.argv + ['-h']

    stderr = sys.stderr
    stdout = sys.stdout

    argv = sys.argv
    if '--error_log' in argv:
        error_fpath_index = argv.index('--error_log') + 1
        error_fpath = argv[error_fpath_index]
    else:
        error_fpath = 'clean_reads.error'

    try:
        main(stdout, stderr)
    except Exception as error:

        msg = 'An unexpected error happened.\n'
        msg += 'The clean_reads developers would appreciate your feedback\n'
        msg += 'Please send them the error log and take a look at it: '
        msg += error_fpath + '\n\n'
        msg += str(error)
        stderr.write(msg)
        hook = cgitb.Hook(display=0, format='text', logfpath=error_fpath)
        hook.handle()
        raise
