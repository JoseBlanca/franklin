#! /usr/bin/perl
# $Id$

use warnings;	

$gmapdb = "/usr/local/share";
$package_version = "2011-03-28.v3";

use Getopt::Std;
use File::Copy;	

undef($opt_d);			# genome name
undef($opt_D);			# destination directory
undef($opt_O);			# order chromosomes numeric/alphabetically
undef($opt_g);			# gunzip files
getopts("B:D:d:O:g");

if (defined($opt_B)) {
    $bindir = $opt_B;
}

if (!defined($dbname = $opt_d)) {
  print_usage();
  die "Must specify genome database name with -d flag.";
} elsif ($opt_d =~ /(\S+)\/(\S+)/) {
  $dbname = $2;
  if (defined($opt_D)) {
    $opt_D = $opt_D . "/" . $1;
  } else {
    $opt_D = $1;
  }
}

$dbname =~ s/\/$//;	# In case user gives -d argument with trailing slash

if (!defined($dblocation = $opt_D)) {
    $dblocation = $gmapdb;
}

if (defined($opt_O)) {
    if ($opt_O == 0) {
	$chr_order_flag = "-S";
    } elsif ($opt_O == 1) {
	$chr_order_flag = "";
    } else {
	die "Don't recognize value $opt_O for -O flag";
    }
} else {
    # Default is to order genomes
    $chr_order_flag = "";
}

if (defined($opt_g)) {
    $gunzip_flag = "-g";
} else {
    $gunzip_flag = "";
}


$genome_fasta = join(" ",@ARGV);



#####################################################################################

create_coords();
create_genome_version();
make_contig();
compress_genome();
create_index_offsets();
create_index_positions();
install_db();

exit;


#####################################################################################


sub create_coords {
    if (defined($bindir)) {
	system("$bindir/fa_coords $gunzip_flag -o $dbname.coords $genome_fasta");
    } else {
	system("fa_coords $gunzip_flag -o $dbname.coords $genome_fasta");
    }
    return;
}

sub check_coords_exists {
# file exists, and is not empty
    unless (-s "$dbname.coords") {
	die "ERROR: $dbname.coords not found.\n";
    }
    return;
}

sub create_genome_version {
    open GENOMEVERSIONFILE, ">$dbname.version" or die $!;
    print GENOMEVERSIONFILE "$dbname\n";
    close GENOMEVERSIONFILE or die $!;
    return;
}

sub make_contig {
    check_coords_exists();
    if (defined($bindir)) {
	system("$bindir/gmap_process $gunzip_flag -c $dbname.coords $genome_fasta | $bindir/gmapindex -d $dbname -A");
    } else {
	system("gmap_process $gunzip_flag -c $dbname.coords $genome_fasta | gmapindex -d $dbname -A");
    }
    return;
}

sub compress_genome {
    if (defined($bindir)) {
	system("$bindir/gmap_process $gunzip_flag -c $dbname.coords $genome_fasta | $bindir/gmapindex -d $dbname -G");
    } else {
	system("gmap_process $gunzip_flag -c $dbname.coords $genome_fasta | gmapindex -d $dbname -G");
    }
    return;
}

sub full_ASCII_genome {
    check_coords_exists();
    make_contig();
	
    if (defined($bindir)) {
	system("$bindir/gmap_process $gunzip_flag -c $dbname.coords $genome_fasta | $bindir/gmapindex -d $dbname -l -G");
    } else {
	system("gmap_process $gunzip_flag -c $dbname.coords $genome_fasta | gmapindex -d $dbname -l -G");
    }
    return;
}

sub create_index_offsets {
    if (defined($bindir)) {
	system("cat $dbname.genomecomp | $bindir/gmapindex -d $dbname -q 3 -O");
    } else {
	system("cat $dbname.genomecomp | gmapindex -d $dbname -q 3 -O");
    }
    return;
}

sub create_index_positions {
    if (defined($bindir)) {
	system("cat $dbname.genomecomp | $bindir/gmapindex -d $dbname -q 3 -P");
    } else {
	system("cat $dbname.genomecomp | gmapindex -d $dbname -q 3 -P");
    }
    return;
}

sub install_db {
    my @suffixes = (
	"chromosome", 
	"chromosome.iit", 
	"chrsubset", 
	"contig", 
	"contig.iit", 
	"genomecomp", 
	"ref3offsets", 
	"ref3positions",
	"version");
	
    $dblocation = "$dblocation/$dbname";
	
    print STDERR "Copying files to directory $dblocation\n";
    system("mkdir -p $dblocation");
    system("mkdir -p $dblocation/$dbname.maps");
    system("chmod 755 $dblocation/$dbname.maps");
    foreach $suffix (@suffixes) {
	system("mv $dbname.$suffix $dblocation/$dbname.$suffix");
	system("chmod 644 $dblocation/$dbname.$suffix");
    }
    return;
}



sub print_usage {
  print <<TEXT1;

gmap_build: Builds a gmap database for a genome to be used by GMAP or GSNAP.
Part of GMAP package, version $package_version.

A simplified alternative to using the program gmap_setup, which constructs a Makefile and then
requires you to run various make commands.

Usage: gmap_build [options...] -d <genomename> <fasta_files>

Options:
    -d    genome name
    -D    destination directory for installation (defaults to gmapdb directory specified at configure time)
    -O    order chromosomes in numeric/alphabetic order (0 = no, 1 = yes (default))
    -g    files are gzipped, so need to gunzip each file first

TEXT1
  return;
}

